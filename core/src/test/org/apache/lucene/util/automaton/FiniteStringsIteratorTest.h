#pragma once
#include "stringhelper.h"
#include <algorithm>
#include <iostream>
#include <memory>
#include <stdexcept>
#include <string>
#include <unordered_set>
#include <deque>

// C++ NOTE: Forward class declarations:
namespace org::apache::lucene::util
{
class IntsRef;
}

namespace org::apache::lucene::util::automaton
{
class FiniteStringsIterator;
}
namespace org::apache::lucene::util::automaton
{
class Automaton;
}

/*
 * Licensed to the Syed Mamun Raihan (sraihan.com) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * sraihan.com licenses this file to You under GPLv3 License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org::apache::lucene::util::automaton
{

using IntsRef = org::apache::lucene::util::IntsRef;
using LuceneTestCase = org::apache::lucene::util::LuceneTestCase;

// C++ TODO: The Java 'import static' statement cannot be converted to C++:
//    import static
//    org.apache.lucene.util.automaton.Operations.DEFAULT_MAX_DETERMINIZED_STATES;

/**
 * Test for {@link FiniteStringsIterator}.
 */
class FiniteStringsIteratorTest : public LuceneTestCase
{
  GET_CLASS_NAME(FiniteStringsIteratorTest)
public:
  virtual void testRandomFiniteStrings1();

  /**
   * Basic test for getFiniteStrings
   */
  virtual void testFiniteStringsBasic();

  virtual void testFiniteStringsEatsStack();

  virtual void testWithCycle() ;

  virtual void testSingletonNoLimit();

  virtual void testShortAccept();

  virtual void testSingleString();

  /**
   * All strings generated by the iterator.
   */
  static std::deque<std::shared_ptr<IntsRef>>
  getFiniteStrings(std::shared_ptr<FiniteStringsIterator> iterator);

  /**
   * Check that strings the automaton returns are as expected.
   *
   * @param automaton Automaton.
   * @param actual Strings generated by automaton.
   */
private:
  void
  assertFiniteStringsRecursive(std::shared_ptr<Automaton> automaton,
                               std::deque<std::shared_ptr<IntsRef>> &actual);

  // ascii only!
  static std::wstring toString(std::shared_ptr<IntsRef> ints);

protected:
  std::shared_ptr<FiniteStringsIteratorTest> shared_from_this()
  {
    return std::static_pointer_cast<FiniteStringsIteratorTest>(
        org.apache.lucene.util.LuceneTestCase::shared_from_this());
  }
};

} // namespace org::apache::lucene::util::automaton
