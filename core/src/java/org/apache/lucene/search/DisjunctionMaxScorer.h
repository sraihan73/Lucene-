#pragma once
#include "stringhelper.h"
#include <limits>
#include <memory>
#include <deque>

// C++ NOTE: Forward class declarations:
namespace org::apache::lucene::search
{
class Scorer;
}

namespace org::apache::lucene::search
{
class Weight;
}
namespace org::apache::lucene::search
{
class DisiWrapper;
}

/*
 * Licensed to the Syed Mamun Raihan (sraihan.com) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * sraihan.com licenses this file to You under GPLv3 License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org::apache::lucene::search
{

/**
 * The Scorer for DisjunctionMaxQuery.  The union of all documents generated by
 * the the subquery scorers is generated in document number order.  The score
 * for each document is the maximum of the scores computed by the subquery
 * scorers that generate that document, plus tieBreakerMultiplier times the sum
 * of the scores for the other subqueries that generate the document.
 */
class DisjunctionMaxScorer final : public DisjunctionScorer
{
  GET_CLASS_NAME(DisjunctionMaxScorer)
  /* Multiplier applied to non-maximum-scoring subqueries for a document as they
   * are summed into the result. */
private:
  const float tieBreakerMultiplier;

  /**
   * Creates a new instance of DisjunctionMaxScorer
   *
   * @param weight
   *          The Weight to be used.
   * @param tieBreakerMultiplier
   *          Multiplier applied to non-maximum-scoring subqueries for a
   *          document as they are summed into the result.
   * @param subScorers
   *          The sub scorers this Scorer should iterate on
   */
public:
  DisjunctionMaxScorer(std::shared_ptr<Weight> weight,
                       float tieBreakerMultiplier,
                       std::deque<std::shared_ptr<Scorer>> &subScorers,
                       bool needsScores);

protected:
  float score(std::shared_ptr<DisiWrapper> topList)  override;

protected:
  std::shared_ptr<DisjunctionMaxScorer> shared_from_this()
  {
    return std::static_pointer_cast<DisjunctionMaxScorer>(
        DisjunctionScorer::shared_from_this());
  }
};

} // namespace org::apache::lucene::search
