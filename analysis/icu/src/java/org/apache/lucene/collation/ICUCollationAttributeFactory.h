#pragma once
#include "../../../../../../../../core/src/java/org/apache/lucene/util/AttributeFactory.h"
#include "stringhelper.h"
#include <memory>

// C++ NOTE: Forward class declarations:
namespace org::apache::lucene::collation::tokenattributes
{
class ICUCollatedTermAttributeImpl;
}

namespace org::apache::lucene::util
{
class AttributeFactory;
}

/*
 * Licensed to the Syed Mamun Raihan (sraihan.com) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * sraihan.com licenses this file to You under GPLv3 License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org::apache::lucene::collation
{

using ICUCollatedTermAttributeImpl = org::apache::lucene::collation::
    tokenattributes::ICUCollatedTermAttributeImpl;
using AttributeFactory = org::apache::lucene::util::AttributeFactory;

using com::ibm::icu::text::Collator;

/**
 * <p>
 *   Converts each token into its {@link com.ibm.icu.text.CollationKey}, and
 *   then encodes bytes as an index term.
 * </p>
 * <p>
 *   <strong>WARNING:</strong> Make sure you use exactly the same Collator at
 *   index and query time -- CollationKeys are only comparable when produced by
 *   the same Collator.  {@link com.ibm.icu.text.RuleBasedCollator}s are
 *   independently versioned, so it is safe to search against stored
 *   CollationKeys if the following are exactly the same (best practice is
 *   to store this information with the index and check that they remain the
 *   same at query time):
 * </p>
 * <ol>
 *   <li>
 *     Collator version - see {@link Collator#getVersion()}
 *   </li>
 *   <li>
 *     The collation strength used - see {@link Collator#setStrength(int)}
 *   </li>
 * </ol>
 * <p>
 *   CollationKeys generated by ICU Collators are not compatible with those
 *   generated by java.text.Collators.  Specifically, if you use
 *   ICUCollationAttributeFactory to generate index terms, do not use
 *   {@link CollationAttributeFactory} on the query side, or vice versa.
 * </p>
 * <p>
 *   ICUCollationAttributeFactory is significantly faster and generates
 * significantly shorter keys than CollationAttributeFactory.  See <a
 * href="http://site.icu-project.org/charts/collation-icu4j-sun"
 *   >http://site.icu-project.org/charts/collation-icu4j-sun</a> for key
 *   generation timing and key length comparisons between ICU4J and
 *   java.text.Collator over several languages.
 * </p>
 */
class ICUCollationAttributeFactory
    : public AttributeFactory::StaticImplementationAttributeFactory<
          std::shared_ptr<ICUCollatedTermAttributeImpl>>
{
  GET_CLASS_NAME(ICUCollationAttributeFactory)
private:
  const std::shared_ptr<Collator> collator;

  /**
   * Create an ICUCollationAttributeFactory, using
   * {@link TokenStream#DEFAULT_TOKEN_ATTRIBUTE_FACTORY} as the
   * factory for all other attributes.
   * @param collator CollationKey generator
   */
public:
  ICUCollationAttributeFactory(std::shared_ptr<Collator> collator);

  /**
   * Create an ICUCollationAttributeFactory, using the supplied Attribute
   * Factory as the factory for all other attributes.
   * @param delegate Attribute Factory
   * @param collator CollationKey generator
   */
  ICUCollationAttributeFactory(std::shared_ptr<AttributeFactory> delegate_,
                               std::shared_ptr<Collator> collator);

  std::shared_ptr<ICUCollatedTermAttributeImpl> createInstance() override;

protected:
  std::shared_ptr<ICUCollationAttributeFactory> shared_from_this()
  {
    return std::static_pointer_cast<ICUCollationAttributeFactory>(
        org.apache.lucene.util.AttributeFactory
            .StaticImplementationAttributeFactory<
                org.apache.lucene.collation.tokenattributes
                    .ICUCollatedTermAttributeImpl>::shared_from_this());
  }
};

} // namespace org::apache::lucene::collation
