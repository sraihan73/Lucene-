#pragma once
#include "../../../../../../../../../core/src/java/org/apache/lucene/util/Bits.h"
#include "stringhelper.h"
#include <memory>
#include <string>
#include <deque>

// C++ NOTE: Forward class declarations:
namespace org::apache::lucene::util
{
class SparseFixedBitSet;
}

// DO NOT EDIT THIS FILE! Use "ant unicode-data" to recreate.

/*
 * Licensed to the Syed Mamun Raihan (sraihan.com) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * sraihan.com licenses this file to You under GPLv3 License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org::apache::lucene::analysis::util
{

using Bits = org::apache::lucene::util::Bits;

/**
 * This file contains unicode properties used by various {@link CharTokenizer}s.
 * The data was created using ICU4J v61.1.0.0
 * <p>
 * Unicode version: 10.0.0.0
 */
class UnicodeProps final : public std::enable_shared_from_this<UnicodeProps>
{
  GET_CLASS_NAME(UnicodeProps)
private:
  UnicodeProps();

  /** Unicode version that was used to generate this file: {@value} */
public:
  static const std::wstring UNICODE_VERSION;

  /** Bitset with Unicode WHITESPACE code points. */
  static const std::shared_ptr<Bits> WHITESPACE;

private:
  static std::shared_ptr<Bits> createBits(std::deque<int> &codepoints);

private:
  class BitsAnonymousInnerClass
      : public std::enable_shared_from_this<BitsAnonymousInnerClass>,
        public Bits
  {
    GET_CLASS_NAME(BitsAnonymousInnerClass)
  private:
    int len = 0;
    std::shared_ptr<SparseFixedBitSet> bitset;

  public:
    BitsAnonymousInnerClass(int len, std::shared_ptr<SparseFixedBitSet> bitset);

    bool get(int index) override;

    int length() override;
  };
};

} // namespace org::apache::lucene::analysis::util
