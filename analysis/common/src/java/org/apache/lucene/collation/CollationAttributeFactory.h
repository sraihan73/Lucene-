#pragma once
#include "../../../../../../../../core/src/java/org/apache/lucene/util/AttributeFactory.h"
#include "stringhelper.h"
#include <memory>

// C++ NOTE: Forward class declarations:
#include  "core/src/java/org/apache/lucene/collation/tokenattributes/CollatedTermAttributeImpl.h"

#include  "core/src/java/org/apache/lucene/util/AttributeFactory.h"

/*
 * Licensed to the Syed Mamun Raihan (sraihan.com) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * sraihan.com licenses this file to You under GPLv3 License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace org::apache::lucene::collation
{

using CollatedTermAttributeImpl =
    org::apache::lucene::collation::tokenattributes::CollatedTermAttributeImpl;
using AttributeFactory = org::apache::lucene::util::AttributeFactory;

/**
 * <p>
 *   Converts each token into its {@link java.text.CollationKey}, and then
 *   encodes the bytes as an index term.
 * </p>
 * <p>
 *   <strong>WARNING:</strong> Make sure you use exactly the same Collator at
 *   index and query time -- CollationKeys are only comparable when produced by
 *   the same Collator.  Since {@link java.text.RuleBasedCollator}s are not
 *   independently versioned, it is unsafe to search against stored
 *   CollationKeys unless the following are exactly the same (best practice is
 *   to store this information with the index and check that they remain the
 *   same at query time):
 * </p>
 * <ol>
 *   <li>JVM vendor</li>
 *   <li>JVM version, including patch version</li>
 *   <li>
 *     The language (and country and variant, if specified) of the Locale
 *     used when constructing the collator via
 *     {@link Collator#getInstance(java.util.Locale)}.
 *   </li>
 *   <li>
 *     The collation strength used - see {@link Collator#setStrength(int)}
 *   </li>
 * </ol>
 * <p>
 *   The <code>ICUCollationAttributeFactory</code> in the analysis-icu package
 *   uses ICU4J's Collator, which makes its
 *   version available, thus allowing collation to be versioned independently
 *   from the JVM.  ICUCollationAttributeFactory is also significantly faster
 * and generates significantly shorter keys than CollationAttributeFactory.  See
 *   <a href="http://site.icu-project.org/charts/collation-icu4j-sun"
 *   >http://site.icu-project.org/charts/collation-icu4j-sun</a> for key
 *   generation timing and key length comparisons between ICU4J and
 *   java.text.Collator over several languages.
 * </p>
 * <p>
 *   CollationKeys generated by java.text.Collators are not compatible
 *   with those those generated by ICU Collators.  Specifically, if you use
 *   CollationAttributeFactory to generate index terms, do not use
 *   ICUCollationAttributeFactory on the query side, or vice versa.
 * </p>
 */
class CollationAttributeFactory
    : public AttributeFactory::StaticImplementationAttributeFactory<
          std::shared_ptr<CollatedTermAttributeImpl>>
{
  GET_CLASS_NAME(CollationAttributeFactory)
private:
  const std::shared_ptr<Collator> collator;

  /**
   * Create a CollationAttributeFactory, using
   * {@link TokenStream#DEFAULT_TOKEN_ATTRIBUTE_FACTORY} as the
   * factory for all other attributes.
   * @param collator CollationKey generator
   */
public:
  CollationAttributeFactory(std::shared_ptr<Collator> collator);

  /**
   * Create a CollationAttributeFactory, using the supplied Attribute Factory
   * as the factory for all other attributes.
   * @param delegate Attribute Factory
   * @param collator CollationKey generator
   */
  CollationAttributeFactory(std::shared_ptr<AttributeFactory> delegate_,
                            std::shared_ptr<Collator> collator);

  std::shared_ptr<CollatedTermAttributeImpl> createInstance() override;

protected:
  std::shared_ptr<CollationAttributeFactory> shared_from_this()
  {
    return std::static_pointer_cast<CollationAttributeFactory>(
        org.apache.lucene.util.AttributeFactory
            .StaticImplementationAttributeFactory<
                org.apache.lucene.collation.tokenattributes
                    .CollatedTermAttributeImpl>::shared_from_this());
  }
};

} // #include  "core/src/java/org/apache/lucene/collation/
