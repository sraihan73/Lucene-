#pragma once
#include "../SnowballProgram.h"
#include "stringbuilder.h"
#include "stringhelper.h"
#include <any>
#include <memory>
#include <deque>

// C++ NOTE: Forward class declarations:
namespace org::tartarus::snowball
{
class Among;
}

// This file was generated automatically by the Snowball to Java compiler

namespace org::tartarus::snowball::ext
{

using Among = org::tartarus::snowball::Among;
using SnowballProgram = org::tartarus::snowball::SnowballProgram;

/**
 * This class was automatically generated by a Snowball to Java compiler
 * It implements the stemming algorithm defined by a snowball script.
 */

// C++ TODO: Most Java annotations will not have direct C++ equivalents:
// ORIGINAL LINE: @SuppressWarnings("unused") public class FinnishStemmer
// extends org.tartarus.snowball.SnowballProgram
class FinnishStemmer : public SnowballProgram
{

private:
  static constexpr int64_t serialVersionUID = 1LL;

  /* patched */
  static const std::shared_ptr<java::lang::invoke::MethodHandles::Lookup>
      methodObject;

  static std::deque<std::shared_ptr<Among>> const a_0;

  static std::deque<std::shared_ptr<Among>> const a_1;

  static std::deque<std::shared_ptr<Among>> const a_2;

  static std::deque<std::shared_ptr<Among>> const a_3;

  static std::deque<std::shared_ptr<Among>> const a_4;

  static std::deque<std::shared_ptr<Among>> const a_5;

  static std::deque<std::shared_ptr<Among>> const a_6;

  static std::deque<std::shared_ptr<Among>> const a_7;

  static std::deque<std::shared_ptr<Among>> const a_8;

  static std::deque<std::shared_ptr<Among>> const a_9;

  static std::deque<wchar_t> const g_AEI;

  static std::deque<wchar_t> const g_V1;

  static std::deque<wchar_t> const g_V2;

  static std::deque<wchar_t> const g_particle_end;

  bool B_ending_removed = false;
  std::shared_ptr<StringBuilder> S_x = std::make_shared<StringBuilder>();
  int I_p2 = 0;
  int I_p1 = 0;

  void copy_from(std::shared_ptr<FinnishStemmer> other);

  bool r_mark_regions();

  bool r_R2();

  bool r_particle_etc();

  bool r_possessive();

  bool r_LONG();

  bool r_VI();

  bool r_case_ending();

  bool r_other_endings();

  bool r_i_plural();

  bool r_t_plural();

  bool r_tidy();

public:
  bool stem() override;

  virtual bool equals(std::any o);

  virtual int hashCode();

protected:
  std::shared_ptr<FinnishStemmer> shared_from_this()
  {
    return std::static_pointer_cast<FinnishStemmer>(
        org.tartarus.snowball.SnowballProgram::shared_from_this());
  }
};

} // namespace org::tartarus::snowball::ext
